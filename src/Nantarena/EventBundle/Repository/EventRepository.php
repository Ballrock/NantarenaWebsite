<?php

namespace Nantarena\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function findWithAll($id)
    {
        return $this->createQueryBuilder('e')
            ->leftJoin('e.tournaments', 'to')
            ->addSelect('to')
            ->leftJoin('to.game', 'g')
            ->addSelect('g')
            ->leftJoin('to.admin', 'u')
            ->addSelect('u')
            ->leftJoin('e.rules', 'r1')
            ->addSelect('r1')
            ->leftJoin('e.autorization', 'r2')
            ->addSelect('r2')
            ->where('e.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    public function findOneShow($slug)
    {
        return $this->createQueryBuilder('e')
            ->leftJoin('e.tournaments', 'to')
            ->addSelect('to')
            ->leftJoin('to.game', 'g')
            ->addSelect('g')
            ->leftJoin('to.admin', 'u')
            ->addSelect('u')
            ->leftJoin('to.teams', 't')
            ->addSelect('t')
            ->leftJoin('t.members', 'm')
            ->addSelect('m')
            ->leftJoin('m.user', 'um')
            ->addSelect('um')
            ->where('e.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getSingleResult();
    }

    public function findNext()
    {
        return $this->createQueryBuilder('e')
            ->where('e.endDate > :now')
            ->orderBy('e.startDate', 'asc')
            ->setParameter('now', new \DateTime())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findLast()
    {
        return $this->createQueryBuilder('e')
            ->where('e.startDate < :now')
            ->orderBy('e.startDate', 'asc')
            ->setParameter('now', new \DateTime())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
