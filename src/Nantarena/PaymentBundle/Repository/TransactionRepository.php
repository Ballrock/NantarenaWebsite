<?php

namespace Nantarena\PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Nantarena\EventBundle\Entity\Entry;

use Nantarena\EventBundle\Entity\Event;
use Nantarena\UserBundle\Entity\User;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    public function findOneByEntry(Entry $entry)
    {
        $qb = $this->createQueryBuilder('t');
        return $qb
            ->where('t.event = :event')
            ->andWhere('t.user = :user')
            ->andWhere($qb->expr()->isNull('t.refund'))
            ->setParameter('event', $entry->getTournament()->getEvent())
            ->setParameter('user', $entry->getUser())
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findOneByEventAndUser(Event $event, User $user)
    {
        $qb = $this->createQueryBuilder('t');
        return $qb
            ->where('t.event = :event')
            ->andWhere('t.user = :user')
            ->andWhere($qb->expr()->isNull('t.refund'))
            ->setParameter('event', $event)
            ->setParameter('user', $user)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findValidPayment(Entry $entry)
    {
        $qb = $this->createQueryBuilder('t');
        return $qb
            ->join('t.payment', 'p')
            ->addSelect('p')
            ->where('t.event = :event')
            ->andWhere('t.user = :user')
            ->andWhere($qb->expr()->isNull('t.refund'))
            ->andWhere($qb->expr()->eq('p.valid', true))
            ->setParameter('event', $entry->getTournament()->getEvent())
            ->setParameter('user', $entry->getUser())
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findValidPaymentTransactionByEvent(Event $event)
    {
        $qb = $this->createQueryBuilder('t');
        return $qb
            ->join('t.payment', 'p')
            ->addSelect('p')
            ->where('t.event = :event')
            ->andWhere($qb->expr()->eq('p.valid', true))
            ->setParameter('event', $event)
            ->orderBy('p.date', 'DESC')
            ->getQuery()
            ->getResult();
    }
}
